package org.tempuri;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.14
 * 2017-11-14T13:47:09.336+08:00
 * Generated source version: 3.1.14
 * 
 */
@WebServiceClient(name = "CommService", 
                  wsdlLocation = "http://218.85.65.43:28000/FuJianServer/CommService.asmx?wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class CommService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "CommService");
    public final static QName CommServiceSoap = new QName("http://tempuri.org/", "CommServiceSoap");
    public final static QName CommServiceSoap12 = new QName("http://tempuri.org/", "CommServiceSoap12");
    public final static QName CommServiceHttpGet = new QName("http://tempuri.org/", "CommServiceHttpGet");
    public final static QName CommServiceHttpPost = new QName("http://tempuri.org/", "CommServiceHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("http://218.85.65.43:28000/FuJianServer/CommService.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CommService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://218.85.65.43:28000/FuJianServer/CommService.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public CommService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CommService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CommService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public CommService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public CommService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public CommService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns CommServiceSoap
     */
    @WebEndpoint(name = "CommServiceSoap")
    public CommServiceSoap getCommServiceSoap() {
        return super.getPort(CommServiceSoap, CommServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CommServiceSoap
     */
    @WebEndpoint(name = "CommServiceSoap")
    public CommServiceSoap getCommServiceSoap(WebServiceFeature... features) {
        return super.getPort(CommServiceSoap, CommServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns CommServiceSoap
     */
    @WebEndpoint(name = "CommServiceSoap12")
    public CommServiceSoap getCommServiceSoap12() {
        return super.getPort(CommServiceSoap12, CommServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CommServiceSoap
     */
    @WebEndpoint(name = "CommServiceSoap12")
    public CommServiceSoap getCommServiceSoap12(WebServiceFeature... features) {
        return super.getPort(CommServiceSoap12, CommServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns CommServiceHttpGet
     */
    @WebEndpoint(name = "CommServiceHttpGet")
    public CommServiceHttpGet getCommServiceHttpGet() {
        return super.getPort(CommServiceHttpGet, CommServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CommServiceHttpGet
     */
    @WebEndpoint(name = "CommServiceHttpGet")
    public CommServiceHttpGet getCommServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(CommServiceHttpGet, CommServiceHttpGet.class, features);
    }


    /**
     *
     * @return
     *     returns CommServiceHttpPost
     */
    @WebEndpoint(name = "CommServiceHttpPost")
    public CommServiceHttpPost getCommServiceHttpPost() {
        return super.getPort(CommServiceHttpPost, CommServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CommServiceHttpPost
     */
    @WebEndpoint(name = "CommServiceHttpPost")
    public CommServiceHttpPost getCommServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(CommServiceHttpPost, CommServiceHttpPost.class, features);
    }

}
